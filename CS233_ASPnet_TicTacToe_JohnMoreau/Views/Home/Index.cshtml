@*
/*
* John Moreau
* CSS233
* 12/7/2023
*/
*@

@{
    ViewData["Title"] = "Tic Tac Toe";
    int GetSpeed(int id) => id == Model.LastId ? 4 : 15; // Draws the X or O quickly if it was not the last one clicked
    string btnDisabledCheck(int i) => Model.GameOver || Model.Board[i] != "-" ? "disabled" : "";
    var disabledCheck = Model.GameOver ? "disabled" : "";
    var hiddenCheck = Model.GameOver ? "" : "hidden";
    var messageTypeCheck = Model.Tie ? "alert-warning" : "alert-success";
}
@model TicTacToe;


<div class="container text-center">
    <div class="container">
        <div class="alert @messageTypeCheck mt-4 @hiddenCheck">
            @(Model.Tie ? "It's a tie!" : Model.CurrentPlayer + " wins!")
        </div>
        <div class="mb-3">
            @if (Model.GameOver)
            {
                <a asp-controller="Home" asp-action="NewGame" class="h3 text-decoration-none">
                    New Game
                </a>
            }
            else
            {
                <h3>@(Model.CurrentPlayer)'s turn</h3>
            }

        </div>
        <div>
            <form asp-action="Update" method="post">

                <input type="hidden" asp-for="CurrentPlayer" />
                <input type="hidden" asp-for="History" />

                @* This was needed when I couldn't get the array to bind when submitting to the controller.*@
                @*<input type="hidden" asp-for="BoardString" value='@Json.Serialize(Model.Board)' />*@
               
                <div class="custom-flex-row justify-content-center">
                    @for (var i = 0; i < Model.Board.Length; ++i)
                    {
                        @* This binds properly by using the same name for each instance.*@
                        @* Add each board position to a hidden field to bind back to the model on submit - Why can't you do a single hidden field for the full array? Grr.' *@
                        <input type="hidden" asp-for="@Model.Board" name="Board" value="@Model.Board[i]" /> 
                        <div class="custom-flex-item">
                            <button type="submit" class="button-square" name="LastId" value=@i @btnDisabledCheck(i)>
                                <canvas id="@i" width="100" height="100"></canvas>
                            </button>
                        </div>
                    }
                </div>
            </form>
        </div>
        <div class="mt-5">
            <h5>Game History</h5>
            <div class="@(Model.History?.Length <= 0 ? "hidden" : "")">
                <p>@Model.History</p>
                <p><strong>X Wins: </strong>@Model.GetWinCount('X') | <strong>O Wins: </strong>@Model.GetWinCount('O') |  <strong>Ties: </strong> @Model.GetWinCount('T')</p>
                <a asp-controller="Home" asp-action="ClearHistory" class="text-decoration-none">
                    Clear
                </a>
            </div>
        </div>

    </div>
</div>
@*Enables the drawing effect*@
<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function () {
        @for (var i = 0; i < Model.Board.Length; ++i) 
        {
            <text>drawLetters('@i', '@Model.Board[i]', '@GetSpeed(i)'); </text>
        }
    }, false);
</script>
